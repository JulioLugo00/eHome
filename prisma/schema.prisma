// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  favoriteIds    String[]  @db.ObjectId
  
  createdProfile Boolean  @default(false)
  work           String?  @default("")
  funFact        String?   @default("")
  pets           String?   @default("")
  spendTime      String?   @default("")
  biography      String?   @default("")
  liveIn         String?   @default("")
  song           String?   @default("")
  guestAttention String?  @default("")
  birthdate      DateTime?  @default(now())
  obsessed       String?   @default("")
  languages      String?   @default("")
  breakfast      String?   @default("")
  description    String?   @default("")

  conversationIds String[] @db.ObjectId
  conversations Conversation[] @relation(fields: [conversationIds], references: [id])
  
  seenMessageIds String[] @db.ObjectId
  seenMessages Message[] @relation("Seen", fields: [seenMessageIds], references: [id])
  guidebooks Guidebook[]

  accounts     Account[]
  listings     Listing[]
  reviews      Review[]
  reservations Reservation[]
  messages Message[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Listing {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  title            String
  description      String
  imageSrc         String[]
  createdAt        DateTime @default(now())
  category         String
  type             String   @default("")
  roomCount        Int
  bathroomCount    Int
  guestCount       Int
  userId           String   @db.ObjectId
  price            Int
  discount         Int
  weekDiscount     Int
  monthlyDiscount  Int
  firstReservation Boolean  @default(false)
  country          String   
  address          String
  
  city             String  
  state            String  
  zipCode          String 
  guns             Boolean
  securityCameras  Boolean
  dangerousAnimals Boolean
  latitude          Float
  longitude         Float
  cityGMap         String?
  cleaningFee      Int?

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  reservations Reservation[]
  reviews      Review[]
  guidebooks GuidebookListing[]
}

model Review {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  listingId  String   @db.ObjectId
  createdAt  DateTime @default(now())
  body       String
  rating     Int

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model Reservation {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  listingId  String   @db.ObjectId
  startDate  DateTime
  endDate    DateTime
  totalPrice Int
  isReviewed Boolean @default(false)

  confirmed Boolean @default(false)
  currency String
  guestNames String[]
  createdAt  DateTime @default(now())
  conversationId String @db.ObjectId

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model PendingReservation {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  listingId  String   @db.ObjectId
  startDate  DateTime
  listingTitle String
  language String
  endDate    DateTime
  totalPrice Int
  userNameHost String
  userIdHost String
  currency String
  adultCount Int
  childrenCount Int
  guestCount Int
  image String
}

model Conversation {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt       DateTime @default(now())
  lastMessageAt DateTime @default(now())
  name String?
  isGroup Boolean?
  image String?
  
  messagesIds String[] @db.ObjectId
  messages Message[]

  userIds String[] @db.ObjectId
  users User[] @relation(fields: [userIds], references: [id])
}

model Message {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  body String?
  image String?
  createdAt DateTime @default(now())

  seenIds String[] @db.ObjectId
  seen User[] @relation("Seen", fields: [seenIds], references: [id])

  conversationId String @db.ObjectId
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  senderId String @db.ObjectId
  sender User @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

model Guidebook {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  coverImage String?
  createdAt DateTime @default(now())
  userId String @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  zones Zone[]
  places Place[]
  towns Town[]
  advices Advice[]
  listings GuidebookListing[]
}	

model Place {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  image String
  classification String
  description String

  guidebookId String @db.ObjectId
  category String
  latitude Float
  longitude Float
  guidebook Guidebook @relation(fields: [guidebookId], references: [id], onDelete: Cascade)
}

model Zone {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  image String
  description String
  guidebookId String @db.ObjectId
  latitude Float
  longitude Float
  
  guidebook Guidebook @relation(fields: [guidebookId], references: [id], onDelete: Cascade)
}

model Town {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  image String
  description String
  guidebookId String @db.ObjectId
  latitude Float
  longitude Float
  
  guidebook Guidebook @relation(fields: [guidebookId], references: [id], onDelete: Cascade)
}

model Advice {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  category String
  title String
  body String
  guidebookId String @db.ObjectId
  
  guidebook Guidebook @relation(fields: [guidebookId], references: [id], onDelete: Cascade)
}

// Esta tabla de unión representa la relación entre Guidebook y Listing
model GuidebookListing {
  id String   @id @default(auto()) @map("_id") @db.ObjectId
  guidebookId String @db.ObjectId
  listingId  String @db.ObjectId
  
  guidebook Guidebook @relation(fields: [guidebookId], references: [id])
  listing   Listing   @relation(fields: [listingId], references: [id])
  
  @@unique([guidebookId, listingId])
}

